# -*- coding: utf-8 -*-
"""Meteorite_Geetika.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p24nfSPfWPZE2OIHFVucCDp3P8fYbQS4
"""

### ---------------------------------------------------------------------------------------------------Meterorite classes----------------------------------------------------------------------------------
### Reclass most common and least common - World Map
!pip install cartopy
import pandas as pd
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import plotly.express as px

df = pd.read_csv("/content/Meteorite_Landings (1).csv")

# Calculate the count of occurrences for each recclass of meteorite
meteorite_class_counts = df['recclass'].value_counts()
print(meteorite_class_counts)

# Most common and least common recclass - L6 is most common class while there are many least common classes
most_common_class = meteorite_class_counts.idxmax() #L6
least_common_classes = meteorite_class_counts[meteorite_class_counts == meteorite_class_counts.min()].index.tolist()

# Create a new column to label meteorites as 'Most Common Class', 'Least Common Class', or 'Other'
df['Class Label'] = df['recclass'].apply(lambda x: 'Most Common Class' if x == most_common_class
                                          else ('Least Common Class' if x in least_common_classes else 'Other'))

# Include only the most common and least common classes
df_filtered = df[df['Class Label'] != 'Other']

# Create the scatter mapbox plot
world_map = px.scatter_mapbox(df_filtered, lat='reclat', lon='reclong',
                            hover_name='name', color='Class Label',
                            hover_data=['mass (g)', 'year', 'recclass'],
                            category_orders={"Class Label": ["Most Common Class", "Least Common Class"]},
                            color_discrete_map={"Most Common Class": "lightgreen", "Least Common Class": "red"},
                            zoom=1, height=300)

# Customize the layout of the map to include a transparent background
world_map.update_layout(
    mapbox_style='open-street-map',
    mapbox=dict(center=dict(lat=0, lon=0), zoom=1),
    margin=dict(l=0, r=0, t=0, b=0),
    mapbox_layers=[{
        "below": 'traces',
        "sourcetype": "raster",
        "sourceattribution": "OpenStreetMap",
        "source": [
            "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"
        ],
        "opacity": 1
    }]
)

# Most common class and least common classes on World map
world_map.show()

### Reclass most common and least common - Bar Graph

import pandas as pd
import plotly.express as px

top_classes = df['recclass'].value_counts().nlargest(20)

# Convert the Series to a DataFrame and rename the columns
top_classes_df = top_classes.reset_index()
top_classes_df.columns = ['recclass', 'Count']

# Create a bar plot using plotly, with the selected classes
Bargraph_classes = px.bar(top_classes_df, x='recclass', y='Count',
                     title="<b>Top 15 Meteorite Classes by Count</b>",
                     text='Count', height=500)

# Updating the layout of the plot
Bargraph_classes.update_layout(
    plot_bgcolor="rgba(0,0,0,0)",
    xaxis=dict(showgrid=True, title="Meteorite Classes"),
    yaxis=dict(showgrid=True, title="Counts"),
    showlegend=False,
)

# Color the bars based on the (count > 4000) of the meteorite classes
Bargraph_classes.update_traces(marker_color=['#4CAF50' if y > 4000 else '#6DFC73' for y in top_classes_df['Count']])

# Bar Graph figure
Bargraph_classes.show()

### Reclass Average mass of Meteorite

import pandas as pd
import plotly.express as px

# Handling NaN mass values
df_cleaned = df.dropna(subset=['mass (g)'])

# Grouping meteorite data by recclass and finding the average mass for each meteorite class
class_mass_means = df_cleaned.groupby('recclass')['mass (g)'].mean().reset_index()

# Highest average mass class dataframe
max_mass_class = class_mass_means.loc[class_mass_means['mass (g)'].idxmax()]
df_max_mass_class = df_cleaned[df_cleaned['recclass'] == max_mass_class['recclass']]

# Bar chart of average mass of the top 20 recclasses
top_masses = class_mass_means.nlargest(20, 'mass (g)')
Bar_graph_mass = px.bar(top_masses, x='recclass', y='mass (g)',
                  title="<b>Top 20 Meteorite Classes by Average Mass</b>", height=500)

# Customize the layout and the color of the bars
Bar_graph_mass.update_layout(plot_bgcolor="rgba(0,0,0,0)", xaxis_showgrid=False, yaxis_title="Average Mass (g)")
Bar_graph_mass.update_traces(marker_color=px.colors.sequential.Viridis_r)

# Show the plots
Bar_graph_mass.show()

